[{"created":"2025-01-01T00:00:00.000Z","text":"This [[Caddy Project]] was created to enable the use of Caddy as a reverse proxy running on a personal computer to run a  federated [[Wiki Farm]]. The project is used daily on my laptop to serve a [[Local Wiki Farm]]. We require Caddy as a [[Reverse Proxy]] in order to more reliably serve domains on port 80 as if they were hosted online.\n\n* [[Caddy Install]]\n*  [[LiveButton]] and [[WikiScript]]\n* [[REST]] for interacting with LiveServer and AstraPi's or FishPi's","title":"About","modified":"2025-03-10T17:25:24.644Z","type":"text/vnd.tiddlywiki"},{"created":"2020-11-15T15:02:55.011Z","text":"! Introduction\n\n<<.from-version \"5.1.23\">>The ''action-confirm'' widget is an [[action widget|ActionWidgets]] that prompts the user for confirmation and invokes other action widgets contained within it only if the user confirms. ActionWidgets are used within triggering widgets such as the ButtonWidget.\n\n! Content and Attributes\n\nThe ''action-confirm'' widget is invisible. Any content within it is only processed if the user confirms the action, or the confirmation has been disabled by the `$prompt` attribute.\n\n|!Attribute |!Description |\n|$message |Optional message displayed to the user when asking for confirmation.|\n|$prompt |Optional flag, set to \"no\" to disable the prompt for confirmation. Defaults to \"yes\" |\n\n! Examples\n\nHere is an example of a button that asks the user for confirmation, before deleting the caption and tags fields of the current tiddler:\n\n<$button>\n<$action-confirm $message=\"Do you wish to delete the caption and tags?\">\n<$action-deletefield caption tags/>\nDelete \"caption\" and \"tags\"\n</$action-confirm>\n</$button>\n\nHere is an example of a button that uses the optional `$prompt` attribute to control whether to prompt the user before deleting the text field of the tiddler HelloThere:\n\n<$button>\n<$action-confirm $message=\"Do you wish to delete the text field?\" $prompt={{$:/state/promptUser}}>\n<$action-deletefield $tiddler=\"HelloThere\" $field=\"text\"/>\n</$action-confirm>\nDelete text from ~HelloThere\n</$button>\n","title":"ActionConfirmWidget","modified":"2025-03-10T16:59:12.214Z","type":"text/vnd.tiddlywiki"},{"created":"2025-01-26T22:20:49.172Z","text":"This is the function we use for the [[Caddyfile]].\n\n```\nfunction caddyFile_Construct pWhich\n   switch pWhich\n      case \"brew\"\n         put caddyFile_BrewDefault() into caddyFile\n         break\n      default\n         put caddyFile_ProjectDefault() into caddyFile\n   end switch\n   return caddyFile\nend caddyFile_Construct\n```\n\nIt is part of the [[lib_Caddy]] Livecode library.\n\n","modified":"2025-01-26T22:21:57.557Z","title":"Author Caddyfile and control which file we use","tags":["Caddy Install","todo"],"due":"","priority":""},{"created":"2025-01-26T20:35:13.178Z","tags":["Caddy Install","todo"],"modified":"2025-01-26T20:38:56.413Z","title":"Brew Caddy Install"},{"created":"2025-01-01T00:00:00.000Z","text":"We standardise on using [[brew]] on macOS for managing [[Command-line]] utilities.","title":"Brew Install","modified":"2025-01-01T00:00:00.000Z","type":"text/vnd.tiddlywiki"},{"created":"2025-01-26T22:36:16.416Z","text":"The local [[caddy]] binary is a single go binaary which can be placed in the [[Caddy Project]] folder or installed using brew when it is added to the $PATH.","title":"caddy","modified":"2025-01-26T22:40:32.516Z","tags":["todo","Caddy Install","done"]},{"created":"2025-01-26T20:41:36.893Z","text":"It is important that Caddy accepts connections on port 80 and proxies them to a number of local servers - for instance a standard federated wiki host running on port 3000 and a Livecode server running on port 9090. There may be other services.","title":"Caddy","modified":"2025-01-26T20:41:43.016Z"},{"created":"2025-01-26T20:38:18.246Z","text":"","description":"A project to help setup and install [[Caddy]]. We start with the [[lcw_Caddy]] project, and [[Caddy Library]], but then also [[Brew Caddy Install]]. We do both.","category":"Livecode","tags":["Project"],"modified":"2025-01-26T22:38:12.781Z","title":"Caddy Install","list":["Find and Fix local Caddy file as served by Livecode","Local Caddy Binary","Author Caddyfile and control which file we use","Brew Caddy Install"]},{"created":"2025-03-09T18:57:59.180Z","text":"on menu_StartCaddy\n   caddy_DoShell \"caddy start\"\n   --\n   put the result -- into caddyHelp\nend menu_StartCaddy\n\non _\nend _\n\non menu_InstallCaddy\n   caddy_Install\n   put the result into caddyPath\n   --\n   caddy_DoShell \"caddy help\"\n   --\n   put the result into caddyHelp\n   display_Text caddyHelp, \"Caddy Help\"\nend menu_InstallCaddy\n\non _\nend _\n\non menu_Getting Started\n   launch url \"https://caddyserver.com/docs/getting-started\"\nend menu_Getting\n\non menu_Github\n   launch url \"https://github.com/caddyserver/caddy/releases\"\nend menu_Github\n\non menu_CaddyHelp\n   caddy_DoShell \"caddy help\"\n   put the result into cliHelp\n   display_Text cliHelp, \"Caddy Help\"\nend menu_CaddyHelp","tags":[],"title":"Caddy Menu","modified":"2025-03-09T18:59:00.440Z","type":"text/plain"},{"created":"2025-01-26T20:46:03.882Z","text":"{{$:/plugins/nico/projectify/ui/dashboard/Dashboard}}","title":"Caddy Project","modified":"2025-01-26T20:46:05.720Z"},{"created":"2025-01-26T22:22:19.715Z","text":"For now we try to use the [[Caddy Project]]'s asset folder for both a copy of the local go binary for running caddy, as well as the `Caddyfile` that we author with Livecode using the [[function caddyFile_ConstructText]] handler.\n\n<<interstitial>>\n\n\n@@.interstitial\n* ''22:32'' Seem to have fixed the file and folder organisation and handlers for that in the library\n* ''22:32'' Let's duplicate this Caddyfile to the default location for the brew install\n* ''22:33'' And create a default project menu interfacce for it\n@@","title":"Caddyfile","modified":"2025-01-26T22:40:34.077Z","tags":["Caddy Install","todo","done"]},{"created":"2025-01-01T00:00:00.000Z","text":"Commandline (cli) tools are samll linux programs that we can call from the terminal or shell environment.","title":"Command-line","modified":"2025-01-01T00:00:00.000Z"},{"created":"2025-03-10T18:46:56.124Z","text":"This procedure accepts the return value of the json-rpc call, and on success calls the macro [[download-dog]]:\n\n```\n\\procedure completion-get-json()\n\\import [subfilter{$:/core/config/GlobalImportFilter}]\n\t<$action-log msg=\"In completion-get-json\"/>\n\t<$action-log/>\n\t<!-- Success -->\n\t<$list filter=\"[<status>compare:number:gteq[200]compare:number:lteq[299]]\" variable=\"ignore\">\n\t\t<!-- Download the dog -->\n\t\t<$macrocall $name=\"download-dog\" url={{{ [<data>jsonget[url]] }}}/>\n\t</$list>\n\\end completion-get-json\n```\n\nWe can view the json that the [[download-dog]] macro processes with this button to Livecode:\n\n<$button type=\"button\" class=\"btn btn-danger btn-sm\">\n  TestDownLoadDog\n  <$callLivecode message=\"TestDownLoadDog\"/>\n</$button>","title":"completion-get-json","modified":"2025-03-10T18:50:37.742Z"},{"created":"2025-03-10T15:53:16.083Z","title":"DragAndDropMechanism 1","text":"","modified":"2025-03-10T15:53:16.083Z","_canonical_uri":"DragAndDropMechanism","type":"image/DragAndDropMechanism"},{"created":"2025-03-10T15:53:49.461Z","title":"DragAndDropMechanism 2","text":"","modified":"2025-03-10T15:53:49.461Z","_canonical_uri":"DragAndDropMechanism","type":"image/DragAndDropMechanism"},{"created":"2025-03-10T13:35:24.497Z","text":"\\define parseurl()\n<$set name=url filter=\"[enlist<actionTiddler>first[]]\">\n<$set name=id filter=\"[<url>removeprefix[https://www.youtube.com/watch?v=]]\">\n<$set name=titre filter=\"[<actionTiddler>removeprefix<url>]\" select=\"0\">\n<$action-setfield full=<<actionTiddler>>/>\n<$action-setfield video=<<url>>/>\n<$action-setfield titre=<<titre>>/>\n<$action-setfield yt=<<id>>/>\n</$set>\n</$set>\n</$set>\n\\end\n\n\\define newVideoButton()\n<$reveal type=\"nomatch\" state=\"!!titre\" text=\"\">\n<$button>\n<$action-sendmessage $message=\"tm-new-tiddler\" title={{!!titre}} tags=\"[[selected yt videos]]\" yt={{!!yt}} day=<<now YYYY.0MM.0DD>>/>\nClick here to create a new video tiddler out of: ''{{!!titre}}''\n</$button>\n</$reveal>\n<$reveal type=\"match\" state=\"!!titre\" text=\"\">\n<$button >\n<$action-sendmessage $message=\"tm-new-tiddler\" title=\"Title of the video\" tags=\"[[selected yt videos]]\" yt={{!!yt}} day=<<now YYYY.0MM.0DD>>/>\nClick here to create a new video tiddler out of the video below.\n</$button>\n</$reveal>\n\\end\n\n<$droppable actions=\"\"\"<<parseurl>>\"\"\">\n<div style=\"background-color: #44aa88; width: 40%;  text-align: center; \">\n''Drag and drop <br/>the //~YouTube// video url <br/>onto this area''<br/>\n<$reveal type=\"nomatch\" state=\"$:/info/browser/is/firefox\" text=\"yes\">\n__Note__ : had the drag and drop been issued within //Firefox//, the video title would have been retrieved at the same time as its ~YouTube ID!.\n</$reveal>\n<$reveal type=\"nomatch\" state=\"!!yt\" text=\"\" style=\"width: 40%; text-align: center; margin: auto;\">\n<<newVideoButton>>\n</$reveal>\n</div>\n</$droppable>\n\n<$list filter=\"[<currentTiddler>get[yt]addprefix[https://www.youtube.com/embed/]]\" variable=url>\n<iframe width=\"560\" height=\"315\" src=<<url>> frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n</$list>","title":"Dropzone Test","modified":"2025-03-10T15:57:33.934Z","type":"text/vnd.tiddlywiki","full":"","video":"","titre":"","yt":""},{"created":"2025-01-26T20:42:53.175Z","text":"","tags":["Caddy Install","todo","done"],"modified":"2025-01-26T22:34:10.330Z","title":"Find and Fix local Caddy file as served by Livecode"},{"created":"2025-01-26T22:26:37.255Z","text":"This handler is currently part of the Livecode [[lib_Caddy]] library file. The handler takes a list of top-level domains (defaulting to those it finds locally), and adds a special route for the platforms rest domain (at the moment that is http://rest.livcecode.wiki:9090) and generates the correctly formatted text for the Cadyfile.\n\n```\nfunction caddyFile_ConstructText pTopDomains, pToLocalHostPort\n   if pTopDomains is empty then\n      put wikiFolder_ListTopLevel() into pTopDomains\n   end if\n   --\n   put \"{\" into caddyFileText\n   put CR&Tab & \"auto_https off\" after caddyFileText\n   put CR & \"}\" after caddyFileText\n   put CR after caddyFileText\n   --\n   put platform_RestDomain() into restDomain\n   put CR & \"# Handle\" && restDomain after caddyFileText   \n   put _CaddyFileToProxy (PlatformRestPort) into toProxy\n   put platform_RestDomain() into restDomain\n   put CR & _CaddyFileProxyLine (restDomain, toProxy) after caddyFileText\n   --\n   put CR after caddyFileText\n   put CR & \"# Catch-all for wikis and their subdomains\" after caddyFileText\n   --\n   put _CaddyFileToProxy (pToLocalHostPort) into toProxy\n   repeat for each line wikiDomain in pTopDomains\n      put CR & _CaddyFileProxyLine (wikiDomain, toProxy) after caddyFileText\n      -- put CR after caddyFileText\n   end repeat\n   --\n   return caddyFileText\nend caddyFile_ConstructText\n```","title":"function caddyFile_ConstructText","modified":"2025-01-26T22:30:58.927Z","tags":["Handler","Livecode"]},{"created":"2025-03-10T18:42:19.742Z","text":"Here is the key code for the (nested) procedure:\n\n```\n\\procedure get-random-dog()\n\n\\procedure completion-get-json()\n\\import [subfilter{$:/core/config/GlobalImportFilter}]\n\t<$action-log msg=\"In completion-get-json\"/>\n\t<$action-log/>\n\t<!-- Success -->\n\t<$list filter=\"[<status>compare:number:gteq[200]compare:number:lteq[299]]\" variable=\"ignore\">\n\t\t<!-- Download the dog -->\n\t\t<$macrocall $name=\"download-dog\" url={{{ [<data>jsonget[url]] }}}/>\n\t</$list>\n\\end completion-get-json\n\n<$action-sendmessage\n\t$message=\"tm-http-request\"\n\turl=\"https://random.dog/woof.json\"\n\tmethod=\"GET\"\n\toncompletion=<<completion-get-json>>\n/>\n\\end get-random-dog\n```\n\nThis toplevel procedure contains the following action:\n\n```\n<$action-sendmessage\n\t$message=\"tm-http-request\"\n\turl=\"https://random.dog/woof.json\"\n\tmethod=\"GET\"\n\toncompletion=<<completion-get-json>>\n/>\n```\n which in turn calls (on completion) the meat of the code through the procedure [[completion-get-json]].","title":"get-random-dog","modified":"2025-03-10T18:48:13.674Z"},{"created":"2025-03-10T16:58:21.379Z","title":"HelloThere","modified":"2025-03-10T16:58:32.926Z"},{"created":"2023-04-02T22:52:37.302Z","text":"\\define droppable-image-actions1()\n<$action-setfield $tiddler=<<actionTiddler>> $field=\"text\" $value=\"\"/>\n<$action-setfield $tiddler=<<actionTiddler>> $field=\"_canonical_uri\" $value={{{ [<actionTiddler>split[/]last[]addprefix[./WhateverSubfolderYourImagesMightBeIn/]] }}}/>\n<$action-setfield $tiddler=<<actionTiddler>> $field=\"type\" $value={{{ [<actionTiddler>split[/]last[]split[.]last[]addprefix[image/]] }}}/>\n<$action-createtiddler $basetitle={{{ [<actionTiddler>split[/]last[]] }}} $template=<<actionTiddler>>/>\n<$action-deletetiddler $tiddler=<<actionTiddler>>/>\n\\end\n\\define droppable-image-actions2()\n<$action-setfield $tiddler=<<actionTiddler>> $field=\"text\" $value=\"\"/>\n<$action-setfield $tiddler=<<actionTiddler>> $field=\"_canonical_uri\" $value={{{ [<actionTiddler>] }}}/>\n<$action-setfield $tiddler=<<actionTiddler>> $field=\"type\" $value={{{ [<actionTiddler>split[/]last[]split[.]last[]addprefix[image/]] }}}/>\n<$action-createtiddler $basetitle={{{ [<actionTiddler>split[/]last[]] }}} $template=<<actionTiddler>>/>\n<$action-deletetiddler $tiddler=<<actionTiddler>>/>\n\\end\n\n\n<<<\n''NOTE: The following will only work with images from local storage IF the TiddlyWiki is also from local storage.  If the TiddlyWiki is on the web, these droppable zones will not accept URL links to local files.\n\nLocally stored images can only be available to TiddlyWiki instances on the web if you make those images available via a locally running personal static web server.\n''\n\n<<<\n\n\n!!! This dropzone is for ''your'' images, __all under one root__, and you want the ___canonical_uri = a relative path to the same domain as your TiddlyWiki instance__.  For this, you want to alter the related macro and replace \"WhateverSubfolderYourImagesMightBeIn\" with the relative path to your images.\n\n<$droppable actions=<<droppable-image-actions1>>>\n<div style=\"border:4px double black;width:50px;height:50px;\">\n</div>\n</$droppable>\n\n---\n\n!!! This dropzone is for any image anywhere on the web or even local\n\n<$droppable actions=<<droppable-image-actions2>>>\n<div style=\"border:4px double black;width:50px;height:50px;\">\n</div>\n</$droppable>\n\n\n","creator":"Charlie Veniot","tags":[],"title":"Image Importing Droppable Zone","modified":"2025-03-10T15:53:06.693Z","modifier":"Charlie Veniot"},{"created":"2025-03-10T15:49:53.933Z","title":"imgres?q=cats&imgurl=https%3A%2F%2Fi.natgeofe.com%2Fn%2F548467d8-c5f1-4551-9f58-6817a8d2c45e%2FNationalGeographic_2572187_3x2.jpg&imgrefurl=https%3A%2F%2Fwww.nationalgeographic.com%2Fanimals%2Fmammals%2Ffacts%2Fdomestic-cat&docid=K6Qd9XWnQFQCoM&tbnid=SEXWBM3N-Geq6M&vet=12ahUKEwi4xpbg7v-LAxVDWUEAHWfIC-sQM3oECB0QAA..i&w=3072&h=2048&hcb=2&itg=1&ved=2ahUKEwi4xpbg7v-LAxVDWUEAHWfIC-sQM3oECB0QAA","text":"","modified":"2025-03-10T15:49:53.933Z","_canonical_uri":"https://www.google.com/imgres?q=cats&imgurl=https%3A%2F%2Fi.natgeofe.com%2Fn%2F548467d8-c5f1-4551-9f58-6817a8d2c45e%2FNationalGeographic_2572187_3x2.jpg&imgrefurl=https%3A%2F%2Fwww.nationalgeographic.com%2Fanimals%2Fmammals%2Ffacts%2Fdomestic-cat&docid=K6Qd9XWnQFQCoM&tbnid=SEXWBM3N-Geq6M&vet=12ahUKEwi4xpbg7v-LAxVDWUEAHWfIC-sQM3oECB0QAA..i&w=3072&h=2048&hcb=2&itg=1&ved=2ahUKEwi4xpbg7v-LAxVDWUEAHWfIC-sQM3oECB0QAA","type":"image/i&w=3072&h=2048&hcb=2&itg=1&ved=2ahUKEwi4xpbg7v-LAxVDWUEAHWfIC-sQM3oECB0QAA"},{"created":"2025-01-21T22:09:20.882Z","text":"A LiveButton is a [[TiddlyButton]] that uses javascript to call Livecode. The `<$hello>` test-action widget is registered:\n\n<$hello/>\n\nTiddlyWiki does not directly support inline JavaScript execution via widgets. Instead, JavaScript must either be embedded in a custom plugin (or maybe executed via an appropriate API like tm-sendmessage???).\n\n! Best Practice\nThe [[$:/plugins/custom/ExecuteJavaScript]] macro exports `exports.callLivecode = CallLivecodeWidget;`, which can be called in a button with `<$callLivecode>`. As you can see by the javascript this (currntly) simply calls the [[tiddlyButton_Call]] function in LiveCode. The idea I believe was to obtain a result in javascript - which as i remember is not going to work (yet). Here are some `callLivecode` button examples:\n\n```\n<$button>\n  $callLivecode\n  <$callLivecode/>\n</$button>\n```\n\n<$button>\n  $callLivecode\n  <$callLivecode/>\n</$button>\n\n<$button>\n  Send \"Hello\" with $callLivecode\n  <$callLivecode message=\"Hello\"/>\n</$button>\n\n<$vars dynamicMessage=\"This is a Dynamic Message from TW\">\n  <$button>\n    Send Dynamic Message with $callLivecode\n    <$callLivecode message=<<dynamicMessage>>/>\n  </$button>\n</$vars>\n\n! Live Actions\nHere are some examples of LiveButtons that interact with Livecode. These ones have been styled using the ShirazPlugin.\n\n<$button type=\"button\" class=\"btn btn-info btn-sm\">\n  EditScript of stack 'lib_TiddlyMessage'\n  <$callLivecode message=\"EditScript stack 'lib_TiddlyMessage'\"/>\n</$button>\n\n<$link overrideClass=\"btn btn-warning\" to=\"Warning\">Link to Warning</$link>\n\n<$button type=\"button\" class=\"btn btn-danger btn-sm\">\n  HkeyEdit 'C tiddlyButton_Call'\n  <$callLivecode message=\"HkeyEdit 'C tiddlyButton_Call'\"/>\n</$button>\n\n! See also\nSome experiments regarding asynchrounous interacctions between LiveCode and TiddlyWiki:\n\n* [[Experimental Messaging]]\n\nThe result of these tests are displayed in the [[Test]] tiddler, and sometimes logged in the [[test-log]] tiddler.\n\n```\n<$button>\n  $wikiscript with Hello\n  <$wikiscript message=\"Hello\"/>\n</$button>\n```\n\nSee also work in progress using transclusion for multiline text only messages:\n\n* [[Multiline LiveButton Messages]]","title":"LiveButton","modified":"2025-03-11T15:42:00.383Z"},{"created":"2025-01-26T20:38:32.463Z","color":"#ffd9ff","tags":["$:/plugins/nico/projectify/tags/Category"],"modified":"2025-01-26T20:38:34.984Z","title":"Livecode"},{"title":"LiveCode Message Log","text":"Message sent: EditScript stack 'lib_TiddlyMessage'","type":"text/plain"},{"created":"2025-01-26T20:34:57.432Z","text":"The local [[caddy]] binary is a single go binaary which can be placed in the [[Caddy Project]] folder or installed using brew when it is added to the $PATH.","tags":["Caddy Install","todo","done"],"modified":"2025-01-26T22:36:38.237Z","title":"Local Caddy Binary"},{"created":"2016-01-07T22:54:27.489Z","text":"Modals (or \"wizards\") fade the main TiddlyWiki window to display an isolated tiddler that must be explicitly dismissed by the user.\n\nThe tiddler to be displayed can contain the following optional fields that are used to customise the modal:\n\n|!Field |!Description |\n|footer|The footer text for the modal|\n|subtitle|The subtitle text for a modal, displayed in a `h3` html tag|\n|class|An additional class to apply to the modal wrapper|\n|help|An optional external link that will be displayed at the left of the footer with the text \"Help\"|\n|mask-closable|When set to ''yes'' or ''true'', will close the modal dialog when the mask (area outside the modal) is clicked|\n\nNote that the footer and subtitle fields are not limited to plain text, and wiki text features such as widgets and transclusions can be used as well.\n\nModals are displayed with the [[WidgetMessage: tm-modal]].\n\n<$button message=\"tm-modal\" param=\"About\">Open demo modal</$button>\n\n<<.tip \"\"\"<$macrocall $name=\".from-version\" version=\"5.2.4\"/> allow using \"mask-closable\" field\"\"\">>\n","title":"Modals","modified":"2025-03-10T16:50:58.755Z","tags":["Features"],"type":"text/vnd.tiddlywiki"},{"created":"2025-01-01T00:00:00.000Z","text":"","title":"my-project-task","modified":"2025-01-01T00:00:00.000Z"},{"created":"2016-01-07T22:57:53.340Z","text":"Notifications are small informational messages that appear at the top right of the TiddlyWiki window, and automatically disappear after a preset time.\n\n<$button message=\"tm-notify\" param=\"About\">Display sample notification</$button>","title":"Notifications","modified":"2025-03-10T16:33:31.551Z","tags":["Features"],"type":"text/vnd.tiddlywiki"},{"created":"2025-03-10T17:19:08.151Z","text":"See the fields of this tiddler for result of [[WidgetMessage: tm-http-request Examples]].","title":"Output","status":"200","modified":"2025-03-10T17:22:05.202Z","error":"","data":"{\n  \"args\": {}, \n  \"headers\": {\n    \"Accept\": \"*/*\", \n    \"Accept-Encoding\": \"gzip, deflate, br\", \n    \"Accept-Language\": \"en-GB,en;q=0.9\", \n    \"Host\": \"httpbin.org\", \n    \"Origin\": \"null\", \n    \"Sec-Fetch-Dest\": \"empty\", \n    \"Sec-Fetch-Mode\": \"cors\", \n    \"Sec-Fetch-Site\": \"cross-site\", \n    \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko)\", \n    \"X-Amzn-Trace-Id\": \"Root=1-67cf1fbc-09e28e2d6f69d6a1512befb3\"\n  }, \n  \"origin\": \"82.33.157.76\", \n  \"url\": \"https://httpbin.org/get\"\n}\n","headers":"{\"content-length\":\"541\",\"content-type\":\"application/json\"}"},{"created":"2025-03-10T17:19:56.286Z","text":"","title":"Output status","modified":"2025-03-10T17:20:09.720Z"},{"created":"2025-03-10T13:19:55.296Z","text":"Here we look to process podcast files by dropping them onto the region below:\n\n<$dropzone>\n  Drop a file here!\n  <p/><p/>\n  This is the end of the zone.\n</$dropzone>\n\nHere we are outside fo the zone. See info over at:\n\n* https://tiddlywiki.com/#DropzoneWidget\n\n!! See\n\n* [[Dropzone Test]]","tags":[],"title":"Podcast Drop","modified":"2025-03-10T14:26:50.283Z","type":"text/vnd.tiddlywiki"},{"title":"Quine","created":"2017-11-10T10:00:48.967Z","modified":"2017-11-10T10:01:46.695Z","tags":["Definitions"],"type":"text/vnd.tiddlywiki","text":"Wikipedia [[defines a Quine|https://en.wikipedia.org/wiki/Quine_(computing)]] as //a computer program which takes no input and produces a copy of its own source code as its only output//.\n\nTiddlyWiki is an unusual example of a practical quine: it is this ability to produce a copy of its own source code that lies at the heart of TiddlyWiki's ability to independently save changes to itself.\n\n\"Quine\" is also the name of [[the unofficial TiddlyWiki application for iPhone/iPad|Saving on iPad/iPhone]]"},{"created":"2025-01-01T00:00:00.000Z","text":"<<todolist-ui caption:\" \"  base:\"Simple\" width:80%>>\nWith this plugin you can drag items around. It has many other features. However the Todlist is not provided in plain text within the toddler.","title":"Reorder Todo List Items","modified":"2025-01-01T00:00:00.000Z"},{"created":"2025-03-10T17:25:49.610Z","text":"Here we can see that it is straightforwards to compose buttons or other interactions that call restFull services. The results can be used to import content into wiki, or control or otherwise interact with servers in your HomeLab.\n\n!! See\n* [[WidgetMessage: tm-http-request]]\n* [[WidgetMessage: tm-http-request Examples]]\n* [[WidgetMessage: tm-http-request Example - Random Dog]]","title":"REST","modified":"2025-03-10T17:32:06.033Z"},{"created":"2025-03-10T19:15:43.321Z","text":"The Shiraz Plugin uses [[Bootstrap]] to theme buttons and other html elements.\n\n<<alert primary \"primary alert\" width:60%>>\n<<alert secondary \"secondary alert\" width:60%>>\n<<alert success \"success alert\" width:60%>>\n<<alert warning \"warning alert\" width:60%>>\n<<alert danger \"danger alert\" width:60%>>\n<<alert info \"info alert\" width:60%>>\n<<alert light \"light alert\" width:60%>>\n<<alert dark \"dark alert\" width:60%>>\n\n!! Other examples \n  \n<div class=\"card\" style=\"width: 60%;\">\n  <div class=\"card-body\">\n    <div class=\"h4 card-title\">Card title</div>\n    <div class=\"h6 card-subtitle text-muted\">Card subtitle</div>\n    <p class=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n    <a href=\"#\" class=\"card-link btn-primary btn\">Card link</a>\n    <a href=\"#\" class=\"card-link btn btn-warning\">Another link</a>\n  </div>\n</div>\n\n<div class=\"card text-white bg-success\">\n   <div class=\"card-body\">\n   <div class=\"card-title h1\">Primary</div>\n    <p class=\"card-text\">With supporting text below as a natural lead-in to additional content.</p>\n        <a href=\"#\" class=\"btn btn-light\">Outline</a>\n    </div>\n</div>\n","title":"ShirazPlugin","modified":"2025-03-10T19:23:19.024Z"},{"title":"test","text":"Unknown message: HkeyEdit C tiddlyButton_Call","type":"text/plain"},{"created":"2025-03-10T15:52:17.654Z","title":"TiddlyWiki 1","text":"","modified":"2025-03-10T15:52:17.654Z","_canonical_uri":"./WhateverSubfolderYourImagesMightBeIn/TiddlyWiki","type":"image/TiddlyWiki"},{"created":"2025-01-01T00:00:00.000Z","text":"We look to enhance the Caddy functionality by making it easy to install, and providing out of the box configuration for your project using the power of Livecode. As this has security implications we wish to provide a new form of open social security that we call [[Tiddly Security]] which is our starting point for [[Public Intelligence]].\n<<checklist mode:\"sort\">>\n\n@@.todo\n[ ]  Add [[Mac Mini Server]]\n[ ] Fix close caddy bug\n[ ] Manage [[Brew Install]] and [[Brew Startup Managment]]\n@@\n\nFor a more powerful way to do Todo lists (with drag reordering of items) see [[Reorder Todo List Items]].","title":"Todo","modified":"2025-01-01T00:00:00.000Z","type":"text/vnd.tiddlywiki"},{"created":"2025-03-10T15:50:21.764Z","title":"VIER%20PFOTEN_2016-07-08_011-4993x3455-1920x1329.webp","text":"","modified":"2025-03-10T15:50:21.764Z","_canonical_uri":"https://media.4-paws.org/d/f/a/1/dfa15c65e6228ced973baa89312e053188c2e407/VIER%20PFOTEN_2016-07-08_011-4993x3455-1920x1329.webp","type":"image/webp"},{"created":"2025-03-10T15:50:27.401Z","title":"VIER%20PFOTEN_2016-07-08_011-4993x3455-1920x1329.webp 1","text":"","modified":"2025-03-10T15:50:27.401Z","_canonical_uri":"./WhateverSubfolderYourImagesMightBeIn/VIER%20PFOTEN_2016-07-08_011-4993x3455-1920x1329.webp","type":"image/webp"},{"created":"2025-03-10T15:51:08.565Z","title":"VIER%20PFOTEN_2016-07-08_011-4993x3455-1920x1329.webp 2","text":"","modified":"2025-03-10T15:51:08.565Z","_canonical_uri":"https://media.4-paws.org/d/f/a/1/dfa15c65e6228ced973baa89312e053188c2e407/VIER%20PFOTEN_2016-07-08_011-4993x3455-1920x1329.webp","type":"image/webp"},{"created":"2025-03-10T15:51:16.533Z","title":"VIER%20PFOTEN_2016-07-08_011-4993x3455-1920x1329.webp 3","text":"","modified":"2025-03-10T15:51:16.533Z","_canonical_uri":"https://media.4-paws.org/d/f/a/1/dfa15c65e6228ced973baa89312e053188c2e407/VIER%20PFOTEN_2016-07-08_011-4993x3455-1920x1329.webp","type":"image/webp"},{"created":"2025-03-10T15:51:23.444Z","title":"VIER%20PFOTEN_2016-07-08_011-4993x3455-1920x1329.webp 4","text":"","modified":"2025-03-10T15:51:23.444Z","_canonical_uri":"./WhateverSubfolderYourImagesMightBeIn/VIER%20PFOTEN_2016-07-08_011-4993x3455-1920x1329.webp","type":"image/webp"},{"created":"2025-03-10T15:52:12.420Z","title":"VIER%20PFOTEN_2016-07-08_011-4993x3455-1920x1329.webp 5","text":"","modified":"2025-03-10T15:52:12.420Z","_canonical_uri":"./WhateverSubfolderYourImagesMightBeIn/VIER%20PFOTEN_2016-07-08_011-4993x3455-1920x1329.webp","type":"image/webp"},{"created":"2025-03-09T09:59:59.355Z","text":"We currently do not implement proper security with regard to code that is embedded in Tiddlers and passed to Livecode. We intend to implement robust procedures including CodeSigning, hower currently all we have is:\n\n1. A single gateway handler [[dfsa]]\n1. Parsing of known command only in this handler\n1. Execution of handlers starting with tiddlyAction_ only\n1. Browsing only of TiddlyWikis that come from an authorised domain (currenlty the peer reviewed LiveCodeWorld GitHub account)","title":"Warning","modified":"2025-03-09T10:03:52.417Z"},{"title":"WidgetMessage: tm-http-request","caption":"tm-http-request","created":"2023-04-29T16:14:53.032Z","modified":"2024-06-14T20:47:04.401Z","tags":["Messages"],"type":"text/vnd.tiddlywiki","text":"The ''tm-http-request'' message is used to make an HTTP request to a server.\n\nIt uses the following properties on the `event` object:\n\n|!Name |!Description |\n|param |Not used |\n|//{any other params}// |Any other parameters are made available as variables within the context of the widget message. See below. |\n\nThe following parameters are used:\n\n|!Name |!Description |\n|method |HTTP method (eg \"GET\", \"POST\") |\n|body |String data to be sent with the request |\n|binary |<<.from-version \"5.3.1\">> Set to \"yes\" to cause the response body to be treated as binary data and returned in base64 format |\n|useDefaultHeaders |<<.from-version \"5.3.4\">> Defaults to true.  Set to \"false\" to prevent default headers from being added.  This can be helpful when dealing with apis that restrict header fields. |\n|query-* |Query string parameters with string values |\n|header-* |Headers with string values |\n|password-header-* |Headers with values taken from the password store |\n|password-query-* |Query string parameters with values taken from the password store |\n|basic-auth-username |<<.from-version \"5.3.4\">> Optional username for HTTP basic authentication |\n|basic-auth-username-from-store |<<.from-version \"5.3.4\">> Optional username for HTTP basic authentication, specified as the name of the entry in the password store containing the username |\n|basic-auth-password |<<.from-version \"5.3.4\">> Optional password for HTTP basic authentication |\n|basic-auth-password-from-store |<<.from-version \"5.3.4\">> Optional password for HTTP basic authentication, specified as the name of the entry in the password store containing the password |\n|bearerAuthToken |<<.from-version \"5.3.6\">> Optional plain text token for HTTP bearer authentication |\n|basic-auth-password-from-store |<<.from-version \"5.3.6\">> Optional token for HTTP bearer authentication, specified as the name of the entry in the password store containing the token |\n|var-* |Variables to be passed to the completion and progress handlers (without the \"var-\" prefix) |\n|bind-status |Title of tiddler to which the status of the request (\"pending\", \"complete\", \"error\") should be bound |\n|bind-progress |Title of tiddler to which the progress of the request (0 to 100) should be bound |\n|oncompletion |Action strings to be executed when the request completes |\n|onprogress |Action strings to be executed when progress is reported |\n\nThe following variables are passed to the completion handler:\n\n|!Name |!Description |\n|status |HTTP result status code (see [[MDN|https://developer.mozilla.org/en-US/docs/Web/HTTP/Status]]) |\n|statusText |HTTP result status text |\n|error |Error string |\n|data |Returned data |\n|headers |Response headers as a JSON object |\n\nThe following variables are passed to the progress handler:\n\n|!Name |!Description |\n|lengthComputable |Whether the progress loaded and total figures are valid - \"yes\" or \"no\" |\n|loaded |Number of bytes loaded so far |\n|total |Total number bytes to be loaded |\n\nNote that the state tiddler $:/state/http-requests contains a number representing the number of outstanding HTTP requests in progress.\n\n!! Examples\n\n* Several simple examples using https://httpbin.org: [[WidgetMessage: tm-http-request Examples]]\n* [[Zotero's|https://www.zotero.org/]] API for retrieving reference items: [[WidgetMessage: tm-http-request Example - Zotero]]\n* [[Random Dog's|https://random.dog/]] API for retrieving random pictures of dogs showing how to retrieve binary data: [[WidgetMessage: tm-http-request Example - Random Dog]]\n* Example of using HTTP Basic Authentication: [[WidgetMessage: tm-http-request Example - Basic Authentication]]\n"},{"title":"WidgetMessage: tm-http-request Example - Basic Authentication","tags":["$:/tags/Global"],"text":"\n!! HTTP Basic Authentication\n\n[[HTTP Basic Authentication|https://en.wikipedia.org/wiki/Basic_access_authentication]] is a simple scheme for HTTP clients pass a username and password to an HTTP server.\n\nThe credentials are passed via the \"Authorization\" header as the string \"Basic \" (note the space) followed by the base64-encoded username and password joined with a colon.\n\nHere is a simple, illustrative example:\n\n```\n\\procedure get-tiddler-list-from-tiddlywiki-server(url,username,password)\n\t\\procedure completion-get-json()\n\t\\import [subfilter{$:/core/config/GlobalImportFilter}]\n\t\t<$action-log msg=\"In completion-get-json\"/>\n\t\t<$action-log/>\n\t\\end completion-get-json\n\t<$action-sendmessage\n\t\t$message=\"tm-http-request\"\n\t\turl=<<url>>\n\t\tmethod=\"GET\"\n\t\theader-Authorization={{{ [<username>addsuffix[:]addsuffix<password>encodebase64[]addprefix[Basic ]] }}}\n\t\toncompletion=<<completion-get-json>>\n\t/>\n\\end get-tiddler-list-from-tiddlywiki-server\n\n<$button>\n<<get-tiddler-list-from-tiddlywiki-server url:\"http://127.0.0.1:8080\" username:\"Joe\" password:\"Bloggs\">>\nDownload\n</$button>\n```\n\n"},{"created":"2025-03-10T18:41:03.344Z","text":"\\procedure download-dog(url)\n\n\\procedure completion-download-dog()\n\\import [subfilter{$:/core/config/GlobalImportFilter}]\n\t<$action-log msg=\"In completion-download-dog\"/>\n\t<$action-log/>\n\t<!-- Success -->\n\t<$list filter=\"[<status>compare:number:gteq[200]compare:number:lteq[299]]\" variable=\"ignore\">\n\t\t<!-- Create the dog tiddler -->\n\t\t<$action-createtiddler\n\t\t\t$basetitle=`$:/RandomDog/$(title)$`\n\t\t\ttext=<<data>>\n\t\t\ttags=\"$:/tags/RandomDog\"\n\t\t\ttype={{{ [<headers>jsonget[content-type]] }}}\n\t\t\tcredits=\"https://random.dog/\"\n\t\t>\n\t\t\t<$action-log msg=\"Created tiddler\" title=<<createTiddler-title>>/>\n\t\t</$createtiddler>\n\t</$list>\n\\end completion-download-dog\n\n<$action-sendmessage\n\t$message=\"tm-http-request\"\n\turl=<<url>>\n\tmethod=\"GET\"\n\tbinary=\"yes\"\n\toncompletion=<<completion-download-dog>>\n\tvar-title=<<url>>\n/>\n\\end download-dog\n\n\\procedure get-random-dog()\n\n\\procedure completion-get-json()\n\\import [subfilter{$:/core/config/GlobalImportFilter}]\n\t<$action-log msg=\"In completion-get-json\"/>\n\t<$action-log/>\n\t<!-- Success -->\n\t<$list filter=\"[<status>compare:number:gteq[200]compare:number:lteq[299]]\" variable=\"ignore\">\n\t\t<!-- Download the dog -->\n\t\t<$macrocall $name=\"download-dog\" url={{{ [<data>jsonget[url]] }}}/>\n\t</$list>\n\\end completion-get-json\n\n<$action-sendmessage\n\t$message=\"tm-http-request\"\n\turl=\"https://random.dog/woof.json\"\n\tmethod=\"GET\"\n\toncompletion=<<completion-get-json>>\n/>\n\\end get-random-dog\n\n!! Random Dogs\n\nThis demo uses the API of the website https://random.dog/ to import a random dog image or video. You can see help for the code of this tiddler here - [[get-random-dog]].\n\n<$button actions=<<get-random-dog>>>\nImport a random dog image or video\n</$button>\n\n<$list filter=\"[tag[$:/tags/RandomDog]limit[1]]\" variable=\"ignore\">\n\n!! Imported Tiddlers\n\n<$button>\n<$action-deletetiddler $filter=\"[tag[$:/tags/RandomDog]]\"/>\nDelete all imported random dogs\n</$button>\n\nExport all imported random dogs: <$macrocall $name=\"exportButton\" exportFilter=\"[tag[$:/tags/RandomDog]]\" lingoBase=\"$:/language/Buttons/ExportTiddlers/\"/>\n\n</$list>\n\n<ol>\n<$list filter=\"[tag[$:/tags/RandomDog]!sort[modified]]\">\n<li>\n<$link>\n<$text text=<<currentTiddler>>/>\n</$link>\n<div style=\"width:300px;\">\n<$transclude $tiddler=<<currentTiddler>>/>\n</div>\n</li>\n</$list>\n</ol>\n","title":"WidgetMessage: tm-http-request Example - Random Dog","tags":["$:/tags/Macro","$:/tags/Global"],"modified":"2025-03-10T18:42:11.419Z"},{"title":"WidgetMessage: tm-http-request Example - Zotero","tags":["$:/tags/Macro","$:/tags/Global"],"text":"\\procedure select-zotero-group()\nSpecify the Zotero group ID to import\n<$edit-text tiddler=\"$:/config/zotero-group\" tag=\"input\"/> or \n<$select tiddler=\"$:/config/zotero-group\">\n<option value=\"4813312\">com216</option>\n<option value=\"4914891\">steve-sunypoly</option>\n<option value=\"4747244\">idt575</option>\n</$select>\n\\end\n\n\\procedure zotero-save-item(item)\n<$action-createtiddler\n\t$basetitle={{{ =[[_zotero_import ]] =[<item>jsonget[key]] =[[ ]] =[<item>jsonget[title]] +[join[]] }}}\n\ttext={{{ [<item>jsonget[title]] }}}\n\ttags=\"$:/tags/ZoteroImport\"\n        zotero-group={{$:/config/zotero-group}}\n>\n\t<$action-setmultiplefields $tiddler=<<createTiddler-title>> $fields=\"[<item>jsonindexes[]addprefix[zotero-]]\" $values=\"[<item>jsonindexes[]] :map[<item>jsonget<currentTiddler>else[.XXXXX.]]\"/>\n\t<$list filter=\"[<item>jsonindexes[creators]]\" variable=\"creatorIndex\">\n\t\t<$action-setmultiplefields $tiddler=<<createTiddler-title>> $fields=\"[<item>jsonget[creators],<creatorIndex>,[creatorType]addprefix[zotero-]]\" $values=\"[<item>jsonget[creators],<creatorIndex>,[lastName]] [<item>jsonget[creators],<creatorIndex>,[firstName]] +[join[, ]] :else[<item>jsonget[creators],<creatorIndex>,[name]] \"/>\n\t</$list>\n</$action-createtiddler>\n\\end zotero-save-item\n\n\\procedure zotero-save-items(data)\n<$list filter=\"[<data>jsonindexes[]] :map[<data>jsonextract<currentTiddler>,[data]]\" variable=\"item\">\n\t<$macrocall $name=\"zotero-save-item\" item=<<item>>/>\n</$list>\n\\end zotero-save-items\n\n\\procedure zotero-get-items(start:\"0\",limit:\"25\")\n\n\\procedure completion()\n\\import [subfilter{$:/core/config/GlobalImportFilter}]\n\t<$action-log msg=\"In completion\"/>\n\t<$action-log/>\n\t<!-- Success -->\n\t<$list filter=\"[<status>compare:number:gteq[200]compare:number:lteq[299]]\" variable=\"ignore\">\n\t\t<!-- Import these items -->\n\t\t<$macrocall $name=\"zotero-save-items\" data=<<data>>/>\n\t\t<!-- Check if there are any more items to download -->\n\t\t<$list filter=\"[<headers>jsonget[total-results]subtract<start>subtract<limit>compare:number:gt[0]]\" variable=\"ignore\">\n\t\t\t<$macrocall $name=\"zotero-get-items\" start={{{ [<start>add<limit>] }}} limit=<<limit>>/>\n\t\t</$list>\n\t</$list>\n\\end completion\n\n\\procedure progress()\n\\import [[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\n\t<$action-log message=\"In progress-actions\"/>\n\\end progress\n\n\\procedure request-url()\n\\rules only transcludeinline transcludeblock filteredtranscludeinline filteredtranscludeblock\nhttps://api.zotero.org/groups/{{$:/config/zotero-group}}/items/\n\\end request-url\n\n<$wikify name=\"url\" text=<<request-url>>>\n\t<$action-sendmessage\n\t\t$message=\"tm-http-request\"\n\t\turl=<<url>>\n\t\tmethod=\"GET\"\n\t\tquery-format=\"json\"\n\t\tquery-sort=\"title\"\n\t\tquery-start=<<start>>\n\t\tquery-limit=<<limit>>\n\t\theader-accept=\"application/json\"\n\t\tbind-status=\"$:/temp/zotero/status\"\n\t\tbind-progress=\"$:/temp/zotero/progress\"\n\t\toncompletion=<<completion>>\n\t\tonprogress=<<progress>>\n\t\tvar-start=<<start>>\n\t\tvar-limit=<<limit>>\n\t/>\n</$wikify>\n\\end\n\n\\procedure zotero-actions()\n<$macrocall $name=\"zotero-get-items\" start=\"0\" limit=\"50\"/>\n\\end\n\n<<select-zotero-group>>\n\n<$button actions=<<zotero-actions>>>\nStart import from Zotero group\n</$button>\n\n<$button message=\"tm-http-cancel-all-requests\">\nCancel all HTTP requests\n</$button> Outstanding requests: {{$:/state/http-requests}}\n\n<$list filter=\"[tag[$:/tags/ZoteroImport]limit[1]]\" variable=\"ignore\">\n\n!! Imported Tiddlers\n\n<$button>\n<$action-deletetiddler $filter=\"[tag[$:/tags/ZoteroImport]]\"/>\nDelete these tiddlers\n</$button>\n\nExport: <$macrocall $name=\"exportButton\" exportFilter=\"[tag[$:/tags/ZoteroImport]]\" lingoBase=\"$:/language/Buttons/ExportTiddlers/\"/>\n\n</$list>\n\n<ol>\n<$list filter=\"[tag[$:/tags/ZoteroImport]]\">\n<li>\n<$link>\n<$view field=\"title\"/>\n</$link>\n</li>\n</$list>\n</ol>\n"},{"created":"2024-06-09T15:22:03.076Z","text":"\\procedure store-fetched-output()\n<$action-setfield $tiddler=Output status=<<status>> error=<<error>> data=<<data>> headers=<<headers>>/>\n\\end\n\n\\procedure http-get()\n\t<$action-sendmessage\n\t\t$message=\"tm-http-request\"\n\t\turl=\"https://httpbin.org/get\"\n\t\tmethod=\"GET\"\n\t\toncompletion=<<store-fetched-output>>\n\t/>\n\\end\n\n<$button actions=<<http-get>>>send HTTP GET</$button>\n\n!! See\n* [[Output]] and  [[Output status]]\n* [[WidgetMessage: tm-http-request Example - Random Dog]]","title":"WidgetMessage: tm-http-request Examples","modified":"2025-03-10T17:31:22.318Z","tags":[],"type":"text/vnd.tiddlywiki"},{"created":"2025-01-25T20:54:54.134Z","text":"<<interstitial>>\n\n@@.interstitial\n* ''20:29'' It's so slow setting all this up. Never do it again.\n* ''20:30'' Next time only do the work - if there is someone to share with and help maintain. Unless its spirttful.\n* ''21:19'' Tired, but happy about adding todo's. Think I like Kara and it's Persian roots.\n* ''21:21'' I promise to add Caddy launching by the end of today.\n* ''16:53'' See [[Modals]] and [[Notifications]] and [[ActionConfirmWidget]]\n* ''17:08'' Making [[REST]] call with [[WidgetMessage: tm-http-request]]\n@@","title":"Working on","modified":"2025-03-10T17:08:50.313Z"}]